{"version":3,"sources":["Components/DataFetch.js","Components/Synth.js","App.js","serviceWorker.js","index.js"],"names":["gasPrices","volatilityData","DataFetch","props","sendData","i","state","dataSet","setInterval","length","parentCallback","clearInterval","dropDown","dropDownChange","e","setState","target","value","dataDropDown","data","selectedData","dropdown","gasData","forEach","element","Date","includes","push","Price","voaltility","className","onChange","this","onClick","Component","Synth","callbackFunction","childData","synth","set","frequency","gasValue","dataDisplay","propsData","Tone","AMSynth","oscillator","type","modulationType","modulationIndex","vibratomount","harmonicity","envelope","attack","decay","sustain","release","attackCurve","modulation","volume","modulationEnvelope","portamento","toMaster","audioContext","AudioContext","triggerAttackRelease","undefined","triggerRelease","textBox","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31295738.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport gasData from \"../Data/gasprices.json\";\nimport voaltility from \"../Data/volatility.json\";\n\n//Empty arrays that will recieve pushed price info from JSON file\nlet gasPrices = [];\nlet volatilityData = [];\n\nexport default class DataFetch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdown: null,\n      dataSet: \"gasPrices\"\n    };\n  }\n  //Sends each change in gasPrices array up to parent component at interval defined at end of function\n  sendData = () => {\n    let i = 0;\n    if (this.state.dataSet === \"gasPrices\") {\n      setInterval(() => {\n        if (i < gasPrices.length) {\n          i++;\n          this.props.parentCallback(gasPrices[i]);\n        } else {\n          clearInterval();\n        }\n      }, this.state.dropDown);\n    } else {\n      setInterval(() => {\n        if (i < volatilityData.length) {\n          i++;\n          this.props.parentCallback(volatilityData[i]);\n        } else {\n          clearInterval();\n        }\n      }, this.state.dropDown);\n    }\n  };\n\n  dropDownChange = e => {\n    this.setState({ dropDown: e.target.value });\n  };\n\n  dataDropDown = e => {\n    let data = e.target.value;\n    this.setState({ dataSet: e.target.value });\n    this.props.selectedData(data);\n  };\n\n  //Filters JSON array for relevant dates and returns only the daily price to gasPrices array\n  componentDidMount() {\n    //fetch gas price data from JSON\n    const originalGasData = gasData;\n    originalGasData.forEach(element => {\n      if (\n        element.Date.includes(\"2006\") ||\n        element.Date.includes(\"2007\") ||\n        element.Date.includes(\"2008\") ||\n        element.Date.includes(\"2009\") ||\n        element.Date.includes(\"2010\") ||\n        element.Date.includes(\"2011\") ||\n        element.Date.includes(\"2012\") ||\n        element.Date.includes(\"2013\") ||\n        element.Date.includes(\"2014\") ||\n        element.Date.includes(\"2015\") ||\n        element.Date.includes(\"2016\") ||\n        element.Date.includes(\"2017\") ||\n        element.Date.includes(\"2018\") ||\n        element.Date.includes(\"2019\")\n      ) {\n        gasPrices.push(element.Price);\n      }\n    });\n\n    //fetch voaltility data from JSON\n    const originalVolatility = voaltility;\n    originalVolatility.forEach(element => {\n      if (\n        element.Date.includes(\"2006\") ||\n        element.Date.includes(\"2007\") ||\n        element.Date.includes(\"2008\") ||\n        element.Date.includes(\"2009\") ||\n        element.Date.includes(\"2010\") ||\n        element.Date.includes(\"2011\") ||\n        element.Date.includes(\"2012\") ||\n        element.Date.includes(\"2013\") ||\n        element.Date.includes(\"2014\") ||\n        element.Date.includes(\"2015\") ||\n        element.Date.includes(\"2016\") ||\n        element.Date.includes(\"2017\") ||\n        element.Date.includes(\"2018\") ||\n        element.Date.includes(\"2019\")\n      ) {\n        volatilityData.push(element[\"VIX Close\"]);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"DataFetch\">\n          <div className=\"DataSelect\">\n            <p>Select Data Set:</p>\n            <select onChange={this.dataDropDown}>\n              <option value=\"gasPrices\">Crude Oil Prices</option>\n              <option value=\"volatilityData\">Volatility Index</option>\n            </select>\n            <p>Select Playback Rate:</p>\n            <select onChange={this.dropDownChange}>\n              <option value=\"1000\">1000 milliseconds</option>\n              <option value=\"100\">100 milliseconds</option>\n              <option value=\"10\">10 milliseconds</option>\n            </select>\n          </div>\n          <h1 onClick={this.sendData}>Send Data</h1>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Tone from \"tone\";\nimport DataFetch from \"./DataFetch\";\n\nlet textBox = \"\";\n\nexport default class Synth extends Component {\n  constructor(props) {\n    super(props);\n\n    //Defines default sound parameters for synth engine\n\n    const synth = new Tone.AMSynth({\n      oscillator: {\n        type: \"square\",\n        modulationType: \"sawtooth\",\n        modulationIndex: 2,\n        vibratomount: 0.5,\n        harmonicity: 7\n      },\n      envelope: {\n        attack: 0.03,\n        decay: 0.6,\n        sustain: 0.03,\n        release: 1.8,\n        attackCurve: \"sine\"\n      },\n      modulation: {\n        volume: 0.9,\n        type: \"triangle\"\n      },\n      modulationEnvelope: {\n        attack: 0.2,\n        decay: 0.4,\n        sustain: 0.1,\n        release: 0.9\n      },\n      volume: -6,\n      frequency: 0,\n      portamento: 0\n    }).toMaster();\n\n    //gasValue is used to start sound engine when DataFetch changes state from null\n    this.state = {\n      gasValue: null,\n      dataSet: \"gasPrices\",\n      synth: synth\n    };\n  }\n\n  //this function recieves data from child component(DataFetch) and sets the state at each iteration defined in setInterval in DataFetch\n  //conditional stops setting synth param when array fully iterates\n  callbackFunction = childData => {\n    const synth = this.state.synth;\n    if (typeof childData === \"number\") {\n      synth.set(\"oscillator\", { frequency: childData });\n    } else {\n    }\n    this.setState({ gasValue: childData });\n  };\n\n  dataDisplay = propsData => {\n    this.setState({ dataSet: propsData });\n  };\n\n  //audioContext starts the web audio engine at mounting to avoid browser errors when the synth is triggered\n  componentDidMount() {\n    this.audioContext = new AudioContext();\n  }\n\n  render() {\n    //listens to the state of gasValue and triggers the synth engine once DataFetch begins manipulating the state\n    //disconnects synth from master output (computer speakers) once array iteration in DataFetch completes\n    if (this.state.gasValue != null) {\n      this.state.synth.triggerAttackRelease(\"C2\", \"8n\");\n    } else if (this.state.gasValue === undefined) {\n      // Audio.masterGainNode.gain.setValueAtTime(0);\n      this.state.synth.triggerRelease();\n    }\n\n    //checks to see what data set is being passed up through props and sets data ticker display accordingly, clears out when array is fully iterated\n    if (this.state.gasValue === null && this.state.dataSet === \"gasPrices\") {\n      this.textBox = \"Price of Natural Gas\";\n    } else if (\n      this.state.gasValue === null &&\n      this.state.dataSet === \"volatilityData\"\n    ) {\n      this.textBox = \"Volatility Index\";\n    } else if (this.state.gasValue === undefined) {\n      this.textBox = \"\";\n    } else {\n      this.textBox = \"$\" + this.state.gasValue;\n    }\n\n    return (\n      <div className=\"App\">\n        <DataFetch\n          parentCallback={this.callbackFunction}\n          selectedData={this.dataDisplay}\n        />\n        <div className=\"gasPrice\">\n          <p>{this.textBox}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Synth from \"./Components/Synth\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Synth />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}